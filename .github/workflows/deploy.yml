name: Deploy
on: [workflow_call, workflow_dispatch]

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: self-hosted
    environment: Production
    outputs:
      meta: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate .env file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "NEXT_PUBLIC_API_URI=${{ secrets.NEXT_PUBLIC_API_URI }}" >> .env
          echo ./.env

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: ${{ github.run_number }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            BUILD_ENV=${{ github.ref_name }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build
    runs-on: self-hosted
    environment: Production
    steps:
      - name: Deploy
        run: |
          CT_NAME="atg-next-boilerplate"
          CONTAINER_STATUS=$(docker container inspect $CT_NAME -f '{{.State.Status}}' 2>/dev/null || echo "not found")
          if [ "$CONTAINER_STATUS" = "running" ]; then
              docker stop $CT_NAME
              docker container rm $CT_NAME
          elif [ "$CONTAINER_STATUS" = "exited" ]; then
              docker container rm $CT_NAME
          fi
          docker run -p ${{ secrets.EXTERNAL_PORT }}:3000 -d --restart=always --name $CT_NAME ${{ needs.build.outputs.meta }}
